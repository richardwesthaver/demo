* ideas
** use branches for separate levels of expansion
- or perhaps some other VC feature.. although I don't want any
  parallel to time, as if expansions occur in sequence. Thus things
  like tags don't feel quite right.
* research
for libraries, always prefer [[https://common-lisp-libraries.readthedocs.io/][defacto libs]]
** [[https://github.com/screenshotbot/screenshotbot-oss][screenshotbot-oss]]
- monolithic repo, includes third-party dependencies
  - full quicklisp source
  - asdf, etc
- addresses many of my concerns about running CL in prod
- the repo is too heavy for my liking though
- I do like the idea of having many systems though
** DB
*** CLIENT
**** [[https://github.com/fukamachi/mito][mito]]
ORM, sqlite, postgres, mysql support
**** [[https://github.com/fukamachi/cl-dbi][cl-dbi]]
database independent interface
**** [[https://github.com/fukamachi/sxql][sxql]]
SQL generator
*** SERVICE
**** [[https://github.com/launchbadge/sqlx][sqlx]]
- supports rustls, tokio
- we should write the service queries using a common-lisp DSL!
  #+begin_src toml
    sqlx = { version = "0.7", features = [ "runtime-tokio", "tls-rustls", "any", "chrono" ] }
  #+end_src
** LOGGING
*** CLIENT
**** [[https://github.com/sharplispers/log4cl/][log4cl]]
supports slime well
*** SERVICE
**** [[https://crates.io/crates/tracing][tracing]]
**** [[https://crates.io/crates/tokio-console][tokio-console]] - monitoring tool
works with tracing using the [[https://crates.io/crates/console-subscriber][console-subscriber]] crate
** UI
[[https://mcclim.common-lisp.dev/][mcclim]]
[[https://slint-ui.com/][slint-ui]]
[[https://github.com/rabbibotton/clog][clog]]
