//! demo/lib.rs --- generated by DEMO:RS-MACROEXPAND
extern crate obj;
extern crate libc;
//pub use fig::*;
use obj::{Objective,Service,CustomService};
use std::ffi::{CStr, CString};
use std::slice;
use libc::{c_char, size_t};
#[no_mangle]
pub unsafe extern "C" fn free_service(ptr: *mut Service) {
    if ptr.is_null() {
        return;
    }
    let _ = Box::from_raw(ptr);
}
#[no_mangle]
pub unsafe extern "C" fn service_from_string(ptr: *const c_char) -> *mut Service {
  assert!(!ptr.is_null());
  let p = CStr::from_ptr(ptr).to_str().unwrap();
  Box::into_raw(Box::new(p.into()))
}
#[no_mangle]
pub unsafe extern "C" fn service_from_json_string(ptr: *const c_char) -> *mut Service {
  assert!(!ptr.is_null());
  let s = CStr::from_ptr(ptr);
  Box::into_raw(Box::new(Service::from_json_str(&s.to_str().unwrap()).unwrap()))
}
#[no_mangle]
pub unsafe extern "C" fn service_to_json_string(ptr: *const Service) -> *mut c_char {
    let p = &*ptr;
    let x = p.to_json_string().unwrap();
    CString::new(x.as_str().as_bytes()).unwrap().into_raw()
}
#[no_mangle]
pub unsafe extern "C" fn service_from_ron_string(ptr: *const c_char) -> *mut Service {
  assert!(!ptr.is_null());
  let s = CStr::from_ptr(ptr);
  Box::into_raw(Box::new(Service::from_ron_str(&s.to_str().unwrap()).unwrap()))
}
#[no_mangle]
pub unsafe extern "C" fn service_to_ron_string(ptr: *const Service) -> *mut c_char {
    let p = &*ptr;
    let x = p.to_ron_string().unwrap();
    CString::new(x.as_str().as_bytes()).unwrap().into_raw()
}
#[no_mangle]
pub unsafe extern "C" fn service_decode(ptr: *const u8, len: size_t) -> *mut Service {
    Box::into_raw(Box::new(Service::decode(slice::from_raw_parts(ptr, len)).unwrap()))
}
#[no_mangle]
pub unsafe extern "C" fn service_encode(ptr: *const Service) -> *mut u8 {
    let p = &*ptr;
    let mut x = p.encode().unwrap();
    let r = x.as_mut_ptr();
    std::mem::forget(x);
    r
}
#[no_mangle]
pub unsafe extern "C" fn free_custom_service(ptr: *mut CustomService) {
    if ptr.is_null() {
        return;
    }
    let _ = Box::from_raw(ptr);
}
#[no_mangle]
pub unsafe extern "C" fn custom_service_from_string(
    ptr: *const c_char,
) -> *mut CustomService {
  assert!(!ptr.is_null());
  let p = CStr::from_ptr(ptr).to_str().unwrap();
  Box::into_raw(Box::new(p.into()))
}
#[no_mangle]
pub unsafe extern "C" fn custom_service_from_json_string(ptr: *const c_char) -> *mut CustomService {
  assert!(!ptr.is_null());
  let s = CStr::from_ptr(ptr);
  Box::into_raw(Box::new(CustomService::from_json_str(&s.to_str().unwrap()).unwrap()))}
#[no_mangle]
pub unsafe extern "C" fn custom_service_to_json_string(
    ptr: *const CustomService,
) -> *mut c_char {
    let p = &*ptr;
    let x = p.to_json_string().unwrap();
    CString::new(x.as_str().as_bytes()).unwrap().into_raw()
}
#[no_mangle]
pub unsafe extern "C" fn custom_service_from_ron_string(
    ptr: *const c_char,
) -> *mut CustomService {
  assert!(!ptr.is_null());
  let s = CStr::from_ptr(ptr);
  Box::into_raw(Box::new(CustomService::from_ron_str(&s.to_str().unwrap()).unwrap()))
}
#[no_mangle]
pub unsafe extern "C" fn custom_service_to_ron_string(
    ptr: *const CustomService,
) -> *mut c_char {
    let p = &*ptr;
    let x = p.to_ron_string().unwrap();
    CString::new(x.as_str().as_bytes()).unwrap().into_raw()
}
#[no_mangle]
pub unsafe extern "C" fn custom_service_decode(
    ptr: *const u8,
    len: size_t,
) -> *mut CustomService {
    Box::into_raw(
        Box::new(CustomService::decode(slice::from_raw_parts(ptr, len)).unwrap()),
    )
}
#[no_mangle]
pub unsafe extern "C" fn custom_service_encode(ptr: *const CustomService) -> *mut u8 {
    let p = &*ptr;
    let mut x = p.encode().unwrap();
    let r = x.as_mut_ptr();
    std::mem::forget(x);
    r
}
